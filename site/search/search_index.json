{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Generic ML","text":""},{"location":"game/","title":"Game","text":""},{"location":"game/#buraco.game","title":"<code>buraco.game</code>","text":"<p>Game management for Buraco.</p>"},{"location":"game/#buraco.game.GameManager","title":"<code>GameManager</code>","text":"<p>Manages active Buraco games.</p> <p>Attributes:</p> Name Type Description <code>games</code> <code>Dict[UUID, GameState]</code> <p>A dictionary of active games, keyed by game_id.</p> Source code in <code>buraco/game.py</code> <pre><code>class GameManager:\n    \"\"\"Manages active Buraco games.\n\n    Attributes:\n        games (Dict[UUID, GameState]): A dictionary of active games, keyed by game_id.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"Initializes the GameManager.\"\"\"\n        self.games: Dict[UUID, GameState] = {}\n        self.bots: Dict[UUID, Dict[UUID, Any]] = {}\n        self.bot_factory = BotFactory()\n\n    def create_game(self, human_players: int = 0, bot_players: List[BotConfig] = []) -&gt; GameState:\n        \"\"\"Creates a new, empty game.\n\n        Returns:\n            GameState: The newly created game state.\n        \"\"\"\n        game_state = GameState()\n        game_state.deck = Deck()\n        self.games[game_state.game_id] = game_state\n        self.bots[game_state.game_id] = {}\n\n        for _ in range(human_players):\n            self.join_game(game_state.game_id, f\"Human Player {len(game_state.players) + 1}\")\n\n        for bot_config in bot_players:\n            self.add_bot_player(game_state.game_id, bot_config.name, bot_config.algorithm)\n\n        return game_state\n\n\n\n    def get_game(self, game_id: UUID) -&gt; GameState | None:\n        \"\"\"Gets the state of a specific game.\n\n        Args:\n            game_id: The ID of the game to get.\n\n        Returns:\n            The game state if found, otherwise None.\n        \"\"\"\n        return self.games.get(game_id)\n\n    def join_game(self, game_id: UUID, player_name: str) -&gt; Player | None:\n        \"\"\"Adds a player to a game.\n\n        Args:\n            game_id: The ID of the game to join.\n            player_name: The name of the player joining.\n\n        Returns:\n            The newly created player if joined successfully, otherwise None.\n        \"\"\"\n        game = self.get_game(game_id)\n        if not game or game.game_started:\n            return None\n\n        if len(game.players) &lt; 4:  # Allow up to 4 players\n            new_player = Player(name=player_name)\n            game.players.append(new_player)\n            return new_player\n        return None\n\n    def add_bot_player(\n        self, game_id: UUID, bot_name: str, algorithm: str = \"random\"\n    ) -&gt; Player | None:\n        \"\"\"Adds a bot player to a game.\n\n        Args:\n            game_id: The ID of the game to join.\n            bot_name: The name of the bot.\n            algorithm: The algorithm the bot will use.\n\n        Returns:\n            The newly created player if joined successfully, otherwise None.\n        \"\"\"\n        game = self.get_game(game_id)\n        if not game or game.game_started:\n            return None\n\n        if len(game.players) &lt; 4:  # Allow up to 4 players\n            new_player = Player(name=bot_name, is_bot=True)\n            game.players.append(new_player)\n            bot_instance = self.bot_factory.create_bot(algorithm, new_player)\n            self.bots[game_id][new_player.player_id] = bot_instance\n            return new_player\n        return None\n\n\n\n    def play_bot_turn(self, game_id: UUID):\n        \"\"\"Plays a single turn for a bot player.\n\n        This method orchestrates a bot's entire turn, including the draw, meld, and discard phases.\n        It retrieves the current game state, gets the appropriate bot instance, and uses the bot's\n        `get_action` method to determine and execute the bot's moves for each phase of the turn.\n\n        Args:\n            game_id: The ID of the game where the bot will play.\n        \"\"\"\n        game = self.get_game(game_id)\n        if not game or not game.game_started:\n            return\n\n        player = self._get_current_player(game)\n        if not player.is_bot:\n            return\n\n        bot_instance = self.bots[game_id][player.player_id]\n\n        # Draw Phase\n        game.turn_phase = TurnPhase.DRAW\n        observation = self._get_observation(game, player)\n        action = bot_instance.get_action(observation)\n        if action.get(\"choice\") == \"PICK_DISCARD\":\n            self.take_discard_pile(game_id, player.player_id)\n        else:\n            self.draw_card_from_deck(game_id, player.player_id)\n\n        # Meld Phase\n        game.turn_phase = TurnPhase.MELD\n        observation = self._get_observation(game, player)\n        action = bot_instance.get_action(observation)\n        if action.get(\"ops\"):\n            for op in action[\"ops\"]:\n                if op.get(\"meld_cards\"):\n                    game = self.meld_cards(game_id, player.player_id, op[\"meld_cards\"])\n\n        # Discard Phase\n        game.turn_phase = TurnPhase.DISCARD\n        observation = self._get_observation(game, player)\n        action = bot_instance.get_action(observation)\n        if action.get(\"card\"):\n            self.discard_card(game_id, player.player_id, action[\"card\"])\n\n        self.next_turn(game)\n\n    def _get_observation(self, game_state: GameState, player: Player) -&gt; Dict:\n        \"\"\"Generates the observation for a player.\"\"\"\n        return {\n            \"hand\": player.hand,\n            \"discard_pile\": game_state.discard_pile,\n            \"turn_phase\": game_state.turn_phase.value,\n            \"can_pick_discard\": len(game_state.discard_pile) &gt; 0,\n        }\n\n    def start_game(self, game_id: UUID) -&gt; GameState | None:\n        \"\"\"Starts a game, deals cards, and prepares the discard pile.\n\n        Args:\n            game_id: The ID of the game to start.\n\n        Returns:\n            The updated game state if started, otherwise None.\n        \"\"\"\n        game = self.get_game(game_id)\n        if not game or game.game_started or len(game.players) not in [2, 4]:\n            return None\n\n        game.game_started = True\n\n        # Deal hands and pots\n        num_players = len(game.players)\n        dealt_cards = game.deck.deal(num_players)\n        for i in range(num_players):\n            game.players[i].hand = dealt_cards[i]\n        game.pots = dealt_cards[num_players:]\n\n        # Create discard pile with one card\n        if game.deck.cards:\n            game.discard_pile.append(game.deck.draw()[0])\n\n        return game\n\n    def _get_player(self, game_state: GameState, player_id: UUID) -&gt; Player:\n        \"\"\"Helper to get a player by ID.\"\"\"\n        for player in game_state.players:\n            if player.player_id == player_id:\n                return player\n        raise ValueError(\"Player not found in game.\")\n\n    def _get_current_player(self, game_state: GameState) -&gt; Player:\n        \"\"\"Helper to get the current player.\"\"\"\n        return game_state.players[game_state.current_turn_player_index]\n\n    def next_turn(self, game_state: GameState):\n        \"\"\"Advances to the next player's turn.\n\n        Args:\n            game_state: The current game state.\n        \"\"\"\n        game_state.current_turn_player_index = (game_state.current_turn_player_index + 1) % len(game_state.players)\n        game_state.turn_phase = TurnPhase.DRAW\n\n    def draw_card_from_deck(self, game_id: UUID, player_id: UUID) -&gt; GameState:\n        \"\"\"Player draws a card from the deck.\"\"\"\n        game = self.get_game(game_id)\n        if not game:\n            raise ValueError(\"Game not found.\")\n\n        current_player = self._get_current_player(game)\n        if current_player.player_id != player_id:\n            raise ValueError(\"It's not this player's turn.\")\n        if game.turn_phase != TurnPhase.DRAW:\n            raise ValueError(\"Cannot draw at this phase of the turn.\")\n\n        if len(current_player.hand) == 0 and game.pots:\n            current_player.hand.extend(game.pots.pop(0))\n            team_index = game.players.index(current_player) % 2\n            game.pot_taken_by_team[team_index] = True\n            game.turn_phase = TurnPhase.MELD\n            return game\n\n        if not game.deck.cards:\n            if game.pots:\n                game.deck.cards = game.pots.pop(0)\n                game.deck.shuffle()\n            else:\n                game.game_over = True\n                self._calculate_scores(game)\n                return game\n\n        drawn_card = game.deck.draw(1)[0]\n        current_player.hand.append(drawn_card)\n        game.turn_phase = TurnPhase.MELD\n        return game\n\n    def take_discard_pile(self, game_id: UUID, player_id: UUID) -&gt; GameState:\n        \"\"\"Player takes the entire discard pile.\"\"\"\n        game = self.get_game(game_id)\n        if not game:\n            raise ValueError(\"Game not found.\")\n\n        current_player = self._get_current_player(game)\n        if current_player.player_id != player_id:\n            raise ValueError(\"It's not this player's turn.\")\n        if game.turn_phase != TurnPhase.DRAW:\n            raise ValueError(\"Cannot take discard pile at this phase of the turn.\")\n        if not game.discard_pile:\n            raise ValueError(\"Discard pile is empty.\")\n\n        # Add all cards from discard pile to player's hand\n        current_player.hand.extend(game.discard_pile)\n        game.discard_pile = []  # Clear the discard pile\n        game.turn_phase = TurnPhase.MELD\n        return game\n\n    def discard_card(self, game_id: UUID, player_id: UUID, card: Card) -&gt; GameState:\n        \"\"\"Player discards a card to end their turn.\"\"\"\n        game = self.get_game(game_id)\n        if not game:\n            raise ValueError(\"Game not found.\")\n\n        current_player = self._get_current_player(game)\n        if current_player.player_id != player_id:\n            raise ValueError(\"It's not this player's turn.\")\n        if game.turn_phase != TurnPhase.DISCARD:\n            raise ValueError(\"Cannot discard at this phase of the turn.\")\n        if card not in current_player.hand:\n            raise ValueError(\"Card not in player's hand.\")\n        if len(current_player.hand) == 1 and card.rank.value in [\"JOKER\", \"TWO\"]:\n            raise ValueError(\"Cannot discard a wildcard to end the game.\")\n\n        current_player.hand.remove(card)\n        game.discard_pile.append(card)\n        game.last_discard = card\n        self._check_game_over(game)\n        return game\n\n    def meld_cards(self, game_id: UUID, player_id: UUID, cards: List[Card], target_meld_id: UUID | None = None) -&gt; GameState:\n        \"\"\"Player creates a new meld or adds to an existing one.\"\"\"\n        game = self.get_game(game_id)\n        if not game:\n            raise ValueError(\"Game not found.\")\n\n        current_player = self._get_current_player(game)\n        if current_player.player_id != player_id:\n            raise ValueError(\"It's not this player's turn.\")\n        if game.turn_phase not in [TurnPhase.MELD, TurnPhase.DISCARD]:\n            raise ValueError(\"Cannot meld at this phase of the turn.\")\n\n        # Basic validation: all cards must be in player's hand\n        if not all(c in current_player.hand for c in cards):\n            raise ValueError(\"One or more cards not in player's hand.\")\n\n        if not self._is_valid_sequence(cards):\n            raise ValueError(\"Invalid meld. Only sequences are allowed.\")\n\n        if target_meld_id:\n            # Add to existing meld\n            target_meld = None\n            team_index = game.players.index(current_player) % 2\n            for i, player in enumerate(game.players):\n                if i % 2 == team_index:\n                    for meld in player.melds:\n                        if meld.meld_id == target_meld_id:\n                            target_meld = meld\n                            break\n                    if target_meld:\n                        break\n\n            if not target_meld:\n                raise ValueError(\"Target meld not found.\")\n            target_meld.cards.extend(cards)\n        else:\n            # Create new meld\n            new_meld = Meld(cards=cards)\n            current_player.melds.append(new_meld)\n\n        for card in cards:\n            current_player.hand.remove(card)\n\n        # After melding, player can still meld or discard\n        game.turn_phase = TurnPhase.DISCARD\n        return game\n\n    def _is_valid_sequence(self, cards: List[Card]) -&gt; bool:\n        \"\"\"Checks if a list of cards is a valid sequence.\"\"\"\n        if len(cards) &lt; 3:\n            return False\n\n        non_wild_cards = [card for card in cards if card.rank.value not in [\"JOKER\", \"TWO\"]]\n        if not non_wild_cards:\n            return False  # a meld must have at least one natural card\n\n        suit = non_wild_cards[0].suit\n        if not all(card.suit == suit or card.rank.value in [\"JOKER\", \"TWO\"] for card in non_wild_cards):\n            return False\n\n        # Sort cards by rank\n        rank_map = {\"A\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"J\": 11, \"Q\": 12, \"K\": 13}\n        cards.sort(key=lambda c: rank_map.get(c.rank.value, 0))\n\n        for i in range(len(cards) - 1):\n            rank1 = cards[i].rank.value\n            rank2 = cards[i+1].rank.value\n\n            if rank1 == \"JOKER\" or rank1 == \"TWO\":\n                continue\n\n            if rank2 == \"JOKER\" or rank2 == \"TWO\":\n                continue\n\n            if rank_map[rank2] - rank_map[rank1] != 1:\n                # Handle Ace at the end\n                if rank1 == \"A\" and rank2 == \"K\":\n                    continue\n                return False\n\n        return True\n\n    def _check_game_over(self, game: GameState):\n        \"\"\"Checks if the game is over and calculates the scores.\"\"\"\n        if not game.deck.cards and not game.pots:\n            game.game_over = True\n            self._calculate_scores(game)\n            return\n\n        current_player = self._get_current_player(game)\n        if len(current_player.hand) == 0:\n            # Check if the player's team has a buraco and has taken the pot\n            team_index = game.players.index(current_player) % 2\n            if game.pot_taken_by_team[team_index]:\n                team_has_buraco = False\n                for i, player in enumerate(game.players):\n                    if i % 2 == team_index:\n                        for meld in player.melds:\n                            if len(meld.cards) &gt;= 7:\n                                team_has_buraco = True\n                                break\n                        if team_has_buraco:\n                            break\n\n                if team_has_buraco:\n                    game.game_over = True\n                    self._calculate_scores(game)\n\n    def _calculate_scores(self, game: GameState):\n        \"\"\"Calculates the scores for each team.\"\"\"\n        scores = {\"team1\": 0, \"team2\": 0}\n        closing_team = game.players.index(self._get_current_player(game)) % 2\n\n        for i, player in enumerate(game.players):\n            team = \"team1\" if i % 2 == 0 else \"team2\"\n            for meld in player.melds:\n                is_dirty = any(card.rank.value in [\"JOKER\", \"TWO\"] for card in meld.cards)\n                if len(meld.cards) &gt;= 7:\n                    scores[team] += 200 if not is_dirty else 100\n                for card in meld.cards:\n                    if card.rank.value == \"JOKER\":\n                        scores[team] += 30\n                    elif card.rank.value == \"TWO\":\n                        scores[team] += 20\n                    elif card.rank.value == \"ACE\":\n                        scores[team] += 15\n                    elif card.rank.value in [\"KING\", \"QUEEN\", \"JACK\", \"TEN\", \"NINE\", \"EIGHT\"]:\n                        scores[team] += 10\n                    else:\n                        scores[team] += 5\n            for card in player.hand:\n                if card.rank.value == \"JOKER\":\n                    scores[team] -= 30\n                elif card.rank.value == \"TWO\":\n                    scores[team] -= 20\n                elif card.rank.value == \"ACE\":\n                    scores[team] -= 15\n                elif card.rank.value in [\"KING\", \"QUEEN\", \"JACK\", \"TEN\", \"NINE\", \"EIGHT\"]:\n                    scores[team] -= 10\n                else:\n                    scores[team] -= 5\n\n        scores[\"team1\" if closing_team == 0 else \"team2\"] += 100\n        game.scores = scores\n        print(game.scores)\n</code></pre>"},{"location":"game/#buraco.game.GameManager.__init__","title":"<code>__init__()</code>","text":"<p>Initializes the GameManager.</p> Source code in <code>buraco/game.py</code> <pre><code>def __init__(self):\n    \"\"\"Initializes the GameManager.\"\"\"\n    self.games: Dict[UUID, GameState] = {}\n    self.bots: Dict[UUID, Dict[UUID, Any]] = {}\n    self.bot_factory = BotFactory()\n</code></pre>"},{"location":"game/#buraco.game.GameManager.add_bot_player","title":"<code>add_bot_player(game_id, bot_name, algorithm='random')</code>","text":"<p>Adds a bot player to a game.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>UUID</code> <p>The ID of the game to join.</p> required <code>bot_name</code> <code>str</code> <p>The name of the bot.</p> required <code>algorithm</code> <code>str</code> <p>The algorithm the bot will use.</p> <code>'random'</code> <p>Returns:</p> Type Description <code>Player | None</code> <p>The newly created player if joined successfully, otherwise None.</p> Source code in <code>buraco/game.py</code> <pre><code>def add_bot_player(\n    self, game_id: UUID, bot_name: str, algorithm: str = \"random\"\n) -&gt; Player | None:\n    \"\"\"Adds a bot player to a game.\n\n    Args:\n        game_id: The ID of the game to join.\n        bot_name: The name of the bot.\n        algorithm: The algorithm the bot will use.\n\n    Returns:\n        The newly created player if joined successfully, otherwise None.\n    \"\"\"\n    game = self.get_game(game_id)\n    if not game or game.game_started:\n        return None\n\n    if len(game.players) &lt; 4:  # Allow up to 4 players\n        new_player = Player(name=bot_name, is_bot=True)\n        game.players.append(new_player)\n        bot_instance = self.bot_factory.create_bot(algorithm, new_player)\n        self.bots[game_id][new_player.player_id] = bot_instance\n        return new_player\n    return None\n</code></pre>"},{"location":"game/#buraco.game.GameManager.create_game","title":"<code>create_game(human_players=0, bot_players=[])</code>","text":"<p>Creates a new, empty game.</p> <p>Returns:</p> Name Type Description <code>GameState</code> <code>GameState</code> <p>The newly created game state.</p> Source code in <code>buraco/game.py</code> <pre><code>def create_game(self, human_players: int = 0, bot_players: List[BotConfig] = []) -&gt; GameState:\n    \"\"\"Creates a new, empty game.\n\n    Returns:\n        GameState: The newly created game state.\n    \"\"\"\n    game_state = GameState()\n    game_state.deck = Deck()\n    self.games[game_state.game_id] = game_state\n    self.bots[game_state.game_id] = {}\n\n    for _ in range(human_players):\n        self.join_game(game_state.game_id, f\"Human Player {len(game_state.players) + 1}\")\n\n    for bot_config in bot_players:\n        self.add_bot_player(game_state.game_id, bot_config.name, bot_config.algorithm)\n\n    return game_state\n</code></pre>"},{"location":"game/#buraco.game.GameManager.discard_card","title":"<code>discard_card(game_id, player_id, card)</code>","text":"<p>Player discards a card to end their turn.</p> Source code in <code>buraco/game.py</code> <pre><code>def discard_card(self, game_id: UUID, player_id: UUID, card: Card) -&gt; GameState:\n    \"\"\"Player discards a card to end their turn.\"\"\"\n    game = self.get_game(game_id)\n    if not game:\n        raise ValueError(\"Game not found.\")\n\n    current_player = self._get_current_player(game)\n    if current_player.player_id != player_id:\n        raise ValueError(\"It's not this player's turn.\")\n    if game.turn_phase != TurnPhase.DISCARD:\n        raise ValueError(\"Cannot discard at this phase of the turn.\")\n    if card not in current_player.hand:\n        raise ValueError(\"Card not in player's hand.\")\n    if len(current_player.hand) == 1 and card.rank.value in [\"JOKER\", \"TWO\"]:\n        raise ValueError(\"Cannot discard a wildcard to end the game.\")\n\n    current_player.hand.remove(card)\n    game.discard_pile.append(card)\n    game.last_discard = card\n    self._check_game_over(game)\n    return game\n</code></pre>"},{"location":"game/#buraco.game.GameManager.draw_card_from_deck","title":"<code>draw_card_from_deck(game_id, player_id)</code>","text":"<p>Player draws a card from the deck.</p> Source code in <code>buraco/game.py</code> <pre><code>def draw_card_from_deck(self, game_id: UUID, player_id: UUID) -&gt; GameState:\n    \"\"\"Player draws a card from the deck.\"\"\"\n    game = self.get_game(game_id)\n    if not game:\n        raise ValueError(\"Game not found.\")\n\n    current_player = self._get_current_player(game)\n    if current_player.player_id != player_id:\n        raise ValueError(\"It's not this player's turn.\")\n    if game.turn_phase != TurnPhase.DRAW:\n        raise ValueError(\"Cannot draw at this phase of the turn.\")\n\n    if len(current_player.hand) == 0 and game.pots:\n        current_player.hand.extend(game.pots.pop(0))\n        team_index = game.players.index(current_player) % 2\n        game.pot_taken_by_team[team_index] = True\n        game.turn_phase = TurnPhase.MELD\n        return game\n\n    if not game.deck.cards:\n        if game.pots:\n            game.deck.cards = game.pots.pop(0)\n            game.deck.shuffle()\n        else:\n            game.game_over = True\n            self._calculate_scores(game)\n            return game\n\n    drawn_card = game.deck.draw(1)[0]\n    current_player.hand.append(drawn_card)\n    game.turn_phase = TurnPhase.MELD\n    return game\n</code></pre>"},{"location":"game/#buraco.game.GameManager.get_game","title":"<code>get_game(game_id)</code>","text":"<p>Gets the state of a specific game.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>UUID</code> <p>The ID of the game to get.</p> required <p>Returns:</p> Type Description <code>GameState | None</code> <p>The game state if found, otherwise None.</p> Source code in <code>buraco/game.py</code> <pre><code>def get_game(self, game_id: UUID) -&gt; GameState | None:\n    \"\"\"Gets the state of a specific game.\n\n    Args:\n        game_id: The ID of the game to get.\n\n    Returns:\n        The game state if found, otherwise None.\n    \"\"\"\n    return self.games.get(game_id)\n</code></pre>"},{"location":"game/#buraco.game.GameManager.join_game","title":"<code>join_game(game_id, player_name)</code>","text":"<p>Adds a player to a game.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>UUID</code> <p>The ID of the game to join.</p> required <code>player_name</code> <code>str</code> <p>The name of the player joining.</p> required <p>Returns:</p> Type Description <code>Player | None</code> <p>The newly created player if joined successfully, otherwise None.</p> Source code in <code>buraco/game.py</code> <pre><code>def join_game(self, game_id: UUID, player_name: str) -&gt; Player | None:\n    \"\"\"Adds a player to a game.\n\n    Args:\n        game_id: The ID of the game to join.\n        player_name: The name of the player joining.\n\n    Returns:\n        The newly created player if joined successfully, otherwise None.\n    \"\"\"\n    game = self.get_game(game_id)\n    if not game or game.game_started:\n        return None\n\n    if len(game.players) &lt; 4:  # Allow up to 4 players\n        new_player = Player(name=player_name)\n        game.players.append(new_player)\n        return new_player\n    return None\n</code></pre>"},{"location":"game/#buraco.game.GameManager.meld_cards","title":"<code>meld_cards(game_id, player_id, cards, target_meld_id=None)</code>","text":"<p>Player creates a new meld or adds to an existing one.</p> Source code in <code>buraco/game.py</code> <pre><code>def meld_cards(self, game_id: UUID, player_id: UUID, cards: List[Card], target_meld_id: UUID | None = None) -&gt; GameState:\n    \"\"\"Player creates a new meld or adds to an existing one.\"\"\"\n    game = self.get_game(game_id)\n    if not game:\n        raise ValueError(\"Game not found.\")\n\n    current_player = self._get_current_player(game)\n    if current_player.player_id != player_id:\n        raise ValueError(\"It's not this player's turn.\")\n    if game.turn_phase not in [TurnPhase.MELD, TurnPhase.DISCARD]:\n        raise ValueError(\"Cannot meld at this phase of the turn.\")\n\n    # Basic validation: all cards must be in player's hand\n    if not all(c in current_player.hand for c in cards):\n        raise ValueError(\"One or more cards not in player's hand.\")\n\n    if not self._is_valid_sequence(cards):\n        raise ValueError(\"Invalid meld. Only sequences are allowed.\")\n\n    if target_meld_id:\n        # Add to existing meld\n        target_meld = None\n        team_index = game.players.index(current_player) % 2\n        for i, player in enumerate(game.players):\n            if i % 2 == team_index:\n                for meld in player.melds:\n                    if meld.meld_id == target_meld_id:\n                        target_meld = meld\n                        break\n                if target_meld:\n                    break\n\n        if not target_meld:\n            raise ValueError(\"Target meld not found.\")\n        target_meld.cards.extend(cards)\n    else:\n        # Create new meld\n        new_meld = Meld(cards=cards)\n        current_player.melds.append(new_meld)\n\n    for card in cards:\n        current_player.hand.remove(card)\n\n    # After melding, player can still meld or discard\n    game.turn_phase = TurnPhase.DISCARD\n    return game\n</code></pre>"},{"location":"game/#buraco.game.GameManager.next_turn","title":"<code>next_turn(game_state)</code>","text":"<p>Advances to the next player's turn.</p> <p>Parameters:</p> Name Type Description Default <code>game_state</code> <code>GameState</code> <p>The current game state.</p> required Source code in <code>buraco/game.py</code> <pre><code>def next_turn(self, game_state: GameState):\n    \"\"\"Advances to the next player's turn.\n\n    Args:\n        game_state: The current game state.\n    \"\"\"\n    game_state.current_turn_player_index = (game_state.current_turn_player_index + 1) % len(game_state.players)\n    game_state.turn_phase = TurnPhase.DRAW\n</code></pre>"},{"location":"game/#buraco.game.GameManager.play_bot_turn","title":"<code>play_bot_turn(game_id)</code>","text":"<p>Plays a single turn for a bot player.</p> <p>This method orchestrates a bot's entire turn, including the draw, meld, and discard phases. It retrieves the current game state, gets the appropriate bot instance, and uses the bot's <code>get_action</code> method to determine and execute the bot's moves for each phase of the turn.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>UUID</code> <p>The ID of the game where the bot will play.</p> required Source code in <code>buraco/game.py</code> <pre><code>def play_bot_turn(self, game_id: UUID):\n    \"\"\"Plays a single turn for a bot player.\n\n    This method orchestrates a bot's entire turn, including the draw, meld, and discard phases.\n    It retrieves the current game state, gets the appropriate bot instance, and uses the bot's\n    `get_action` method to determine and execute the bot's moves for each phase of the turn.\n\n    Args:\n        game_id: The ID of the game where the bot will play.\n    \"\"\"\n    game = self.get_game(game_id)\n    if not game or not game.game_started:\n        return\n\n    player = self._get_current_player(game)\n    if not player.is_bot:\n        return\n\n    bot_instance = self.bots[game_id][player.player_id]\n\n    # Draw Phase\n    game.turn_phase = TurnPhase.DRAW\n    observation = self._get_observation(game, player)\n    action = bot_instance.get_action(observation)\n    if action.get(\"choice\") == \"PICK_DISCARD\":\n        self.take_discard_pile(game_id, player.player_id)\n    else:\n        self.draw_card_from_deck(game_id, player.player_id)\n\n    # Meld Phase\n    game.turn_phase = TurnPhase.MELD\n    observation = self._get_observation(game, player)\n    action = bot_instance.get_action(observation)\n    if action.get(\"ops\"):\n        for op in action[\"ops\"]:\n            if op.get(\"meld_cards\"):\n                game = self.meld_cards(game_id, player.player_id, op[\"meld_cards\"])\n\n    # Discard Phase\n    game.turn_phase = TurnPhase.DISCARD\n    observation = self._get_observation(game, player)\n    action = bot_instance.get_action(observation)\n    if action.get(\"card\"):\n        self.discard_card(game_id, player.player_id, action[\"card\"])\n\n    self.next_turn(game)\n</code></pre>"},{"location":"game/#buraco.game.GameManager.start_game","title":"<code>start_game(game_id)</code>","text":"<p>Starts a game, deals cards, and prepares the discard pile.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>UUID</code> <p>The ID of the game to start.</p> required <p>Returns:</p> Type Description <code>GameState | None</code> <p>The updated game state if started, otherwise None.</p> Source code in <code>buraco/game.py</code> <pre><code>def start_game(self, game_id: UUID) -&gt; GameState | None:\n    \"\"\"Starts a game, deals cards, and prepares the discard pile.\n\n    Args:\n        game_id: The ID of the game to start.\n\n    Returns:\n        The updated game state if started, otherwise None.\n    \"\"\"\n    game = self.get_game(game_id)\n    if not game or game.game_started or len(game.players) not in [2, 4]:\n        return None\n\n    game.game_started = True\n\n    # Deal hands and pots\n    num_players = len(game.players)\n    dealt_cards = game.deck.deal(num_players)\n    for i in range(num_players):\n        game.players[i].hand = dealt_cards[i]\n    game.pots = dealt_cards[num_players:]\n\n    # Create discard pile with one card\n    if game.deck.cards:\n        game.discard_pile.append(game.deck.draw()[0])\n\n    return game\n</code></pre>"},{"location":"game/#buraco.game.GameManager.take_discard_pile","title":"<code>take_discard_pile(game_id, player_id)</code>","text":"<p>Player takes the entire discard pile.</p> Source code in <code>buraco/game.py</code> <pre><code>def take_discard_pile(self, game_id: UUID, player_id: UUID) -&gt; GameState:\n    \"\"\"Player takes the entire discard pile.\"\"\"\n    game = self.get_game(game_id)\n    if not game:\n        raise ValueError(\"Game not found.\")\n\n    current_player = self._get_current_player(game)\n    if current_player.player_id != player_id:\n        raise ValueError(\"It's not this player's turn.\")\n    if game.turn_phase != TurnPhase.DRAW:\n        raise ValueError(\"Cannot take discard pile at this phase of the turn.\")\n    if not game.discard_pile:\n        raise ValueError(\"Discard pile is empty.\")\n\n    # Add all cards from discard pile to player's hand\n    current_player.hand.extend(game.discard_pile)\n    game.discard_pile = []  # Clear the discard pile\n    game.turn_phase = TurnPhase.MELD\n    return game\n</code></pre>"},{"location":"main/","title":"Main","text":""},{"location":"main/#main","title":"<code>main</code>","text":""},{"location":"main/#main.add_bot_endpoint","title":"<code>add_bot_endpoint(game_id, request)</code>","text":"<p>Adds a bot player to a game.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>UUID</code> <p>The UUID of the game to join.</p> required <code>request</code> <code>AddBotRequest</code> <p>A request body containing the bot's name.</p> required <p>Returns:</p> Type Description <p>The player object if joined successfully.</p> Source code in <code>main.py</code> <pre><code>@app.post(\"/games/{game_id}/add_bot\", tags=[\"Game Management\"])\ndef add_bot_endpoint(game_id: UUID, request: AddBotRequest):\n    \"\"\"Adds a bot player to a game.\n\n    Args:\n        game_id: The UUID of the game to join.\n        request: A request body containing the bot's name.\n\n    Returns:\n        The player object if joined successfully.\n    \"\"\"\n    player = game_manager.add_bot_player(game_id, request.bot_name)\n    if not player:\n        raise HTTPException(\n            status_code=400,\n            detail=\"Could not add bot to game. It might be full or already started.\",\n        )\n    return player\n</code></pre>"},{"location":"main/#main.create_and_start_bot_game_endpoint","title":"<code>create_and_start_bot_game_endpoint(request)</code>","text":"<p>Creates and starts a new Buraco game with only bots.</p> <p>Returns:</p> Type Description <p>The initial state of the newly created game.</p> Source code in <code>main.py</code> <pre><code>@app.post(\"/games/create_and_start_bot_game\", tags=[\"Game Management\"])\ndef create_and_start_bot_game_endpoint(request: CreateBotGameRequest):\n    \"\"\"Creates and starts a new Buraco game with only bots.\n\n    Returns:\n        The initial state of the newly created game.\n    \"\"\"\n    game = game_manager.create_game(\n        human_players=0, bot_players=request.bot_players\n    )\n    game = game_manager.start_game(game.game_id)\n    if not game:\n        raise HTTPException(\n            status_code=400,\n            detail=\"Could not start game. Ensure 2 or 4 players have joined and it's not already started.\",\n        )\n\n    if game.players[0].is_bot:\n        game_manager.play_bot_turn(game.game_id)\n\n    return game_manager.get_game(game.game_id)\n</code></pre>"},{"location":"main/#main.create_configured_game_endpoint","title":"<code>create_configured_game_endpoint(request)</code>","text":"<p>Creates a new Buraco game with a specific configuration.</p> <p>Returns:</p> Type Description <p>The initial state of the newly created game.</p> Source code in <code>main.py</code> <pre><code>@app.post(\"/games/create_configured\", tags=[\"Game Management\"])\ndef create_configured_game_endpoint(request: CreateConfiguredGameRequest):\n    \"\"\"Creates a new Buraco game with a specific configuration.\n\n    Returns:\n        The initial state of the newly created game.\n    \"\"\"\n    return game_manager.create_game(\n        human_players=request.human_players, bot_players=request.bot_players\n    )\n</code></pre>"},{"location":"main/#main.create_game_endpoint","title":"<code>create_game_endpoint()</code>","text":"<p>Creates a new Buraco game.</p> <p>Returns:</p> Type Description <p>The initial state of the newly created game.</p> Source code in <code>main.py</code> <pre><code>@app.post(\"/games\", tags=[\"Game Management\"])\ndef create_game_endpoint():\n    \"\"\"Creates a new Buraco game.\n\n    Returns:\n        The initial state of the newly created game.\n    \"\"\"\n    return game_manager.create_game()\n</code></pre>"},{"location":"main/#main.get_game_endpoint","title":"<code>get_game_endpoint(game_id)</code>","text":"<p>Retrieves the state of a specific game.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>UUID</code> <p>The UUID of the game to retrieve.</p> required <p>Returns:</p> Type Description <p>The current state of the game.</p> Source code in <code>main.py</code> <pre><code>@app.get(\"/games/{game_id}\", tags=[\"Game Management\"])\ndef get_game_endpoint(game_id: UUID):\n    \"\"\"Retrieves the state of a specific game.\n\n    Args:\n        game_id: The UUID of the game to retrieve.\n\n    Returns:\n        The current state of the game.\n    \"\"\"\n    game = game_manager.get_game(game_id)\n    if not game:\n        raise HTTPException(status_code=404, detail=\"Game not found\")\n    return game\n</code></pre>"},{"location":"main/#main.join_game_endpoint","title":"<code>join_game_endpoint(game_id, request)</code>","text":"<p>Adds a player to a game.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>UUID</code> <p>The UUID of the game to join.</p> required <code>request</code> <code>JoinGameRequest</code> <p>A request body containing the player's name.</p> required <p>Returns:</p> Type Description <p>The player object if joined successfully.</p> Source code in <code>main.py</code> <pre><code>@app.post(\"/games/{game_id}/join\", tags=[\"Game Management\"])\ndef join_game_endpoint(game_id: UUID, request: JoinGameRequest):\n    \"\"\"Adds a player to a game.\n\n    Args:\n        game_id: The UUID of the game to join.\n        request: A request body containing the player's name.\n\n    Returns:\n        The player object if joined successfully.\n    \"\"\"\n    player = game_manager.join_game(game_id, request.player_name)\n    if not player:\n        raise HTTPException(\n            status_code=400,\n            detail=\"Could not join game. It might be full or already started.\",\n        )\n    return player\n</code></pre>"},{"location":"main/#main.read_root","title":"<code>read_root()</code>","text":"<p>Root endpoint of the API.</p> Source code in <code>main.py</code> <pre><code>@app.get(\"/\", tags=[\"Root\"])\ndef read_root():\n    \"\"\"Root endpoint of the API.\"\"\"\n    return {\"message\": \"Welcome to the Buraco API!\"}\n</code></pre>"},{"location":"main/#main.start_game_endpoint","title":"<code>start_game_endpoint(game_id)</code>","text":"<p>Starts a game that has enough players.</p> <p>Parameters:</p> Name Type Description Default <code>game_id</code> <code>UUID</code> <p>The UUID of the game to start.</p> required <p>Returns:</p> Type Description <p>The state of the game after starting.</p> Source code in <code>main.py</code> <pre><code>@app.post(\"/games/{game_id}/start\", tags=[\"Game Management\"])\ndef start_game_endpoint(game_id: UUID):\n    \"\"\"Starts a game that has enough players.\n\n    Args:\n        game_id: The UUID of the game to start.\n\n    Returns:\n        The state of the game after starting.\n    \"\"\"\n    game = game_manager.start_game(game_id)\n    if not game:\n        raise HTTPException(\n            status_code=400,\n            detail=\"Could not start game. Ensure 2 players have joined and it's not already started.\",\n        )\n\n    if game.players[0].is_bot:\n        game_manager.play_bot_turn(game_id)\n\n    return game\n</code></pre>"},{"location":"main/#main.websocket_endpoint","title":"<code>websocket_endpoint(websocket, game_id)</code>  <code>async</code>","text":"<p>WebSocket endpoint for real-time game communication.</p> <p>Parameters:</p> Name Type Description Default <code>websocket</code> <code>WebSocket</code> <p>The WebSocket connection.</p> required <code>game_id</code> <code>UUID</code> <p>The UUID of the game to connect to.</p> required Source code in <code>main.py</code> <pre><code>@app.websocket(\"/ws/{game_id}\")\nasync def websocket_endpoint(websocket: WebSocket, game_id: UUID):\n    \"\"\"WebSocket endpoint for real-time game communication.\n\n    Args:\n        websocket: The WebSocket connection.\n        game_id: The UUID of the game to connect to.\n    \"\"\"\n    await ws_manager.connect(websocket, game_id)\n    await ws_manager.broadcast(json.dumps({\"type\": \"player_connected\", \"payload\": f\"A new player has connected to game {game_id}\"}), game_id)\n    try:\n        while True:\n            data = await websocket.receive_json()\n            print(data)\n            action = data.get(\"action\")\n\n            game = game_manager.get_game(game_id)\n            if not game:\n                await websocket.send_json({\"error\": \"Game not found.\"})\n                continue\n\n            try:\n                if action == \"draw_from_deck\":\n                    player_id = UUID(data.get(\"player_id\"))\n                    game = game_manager.draw_card_from_deck(game_id, player_id)\n                elif action == \"take_discard_pile\":\n                    player_id = UUID(data.get(\"player_id\"))\n                    game = game_manager.take_discard_pile(game_id, player_id)\n                elif action == \"discard_card\":\n                    player_id = UUID(data.get(\"player_id\"))\n                    card_data = data.get(\"card\")\n                    card = Card(**card_data)\n                    game = game_manager.discard_card(game_id, player_id, card)\n                    game_manager.next_turn(game)\n                    if game_manager._get_current_player(game).is_bot:\n                        game_manager.play_bot_turn(game_id)\n                elif action == \"meld_cards\":\n                    player_id = UUID(data.get(\"player_id\"))\n                    cards_data = data.get(\"cards\")\n                    cards = [Card(**c) for c in cards_data]\n                    target_meld_id = data.get(\"target_meld_id\")\n                    game = game_manager.meld_cards(game_id, player_id, cards, UUID(target_meld_id) if target_meld_id else None)\n                elif action == \"PLAY_BOT_TURN\":\n                    game_manager.play_bot_turn(game_id)\n                    game = game_manager.get_game(game_id)\n                else:\n                    await websocket.send_json({\"error\": f\"Unknown action: {action}\"})\n                    continue\n\n                # Broadcast updated game state to all players\n                await ws_manager.broadcast_game_state(game)\n\n            except ValueError as e:\n                await websocket.send_json({\"error\": str(e)})\n            except Exception as e:\n                await websocket.send_json({\"error\": f\"An unexpected error occurred: {str(e)}\"})\n\n    except WebSocketDisconnect:\n        ws_manager.disconnect(websocket, game_id)\n        await ws_manager.broadcast(json.dumps({\"type\": \"player_disconnected\", \"payload\": f\"A player has left game {game_id}\"}), game_id)\n</code></pre>"},{"location":"models/","title":"Models","text":""},{"location":"models/#buraco.models","title":"<code>buraco.models</code>","text":""},{"location":"models/#buraco.models.Card","title":"<code>Card</code>  <code>dataclass</code>","text":"<p>Represents a playing card.</p> Source code in <code>buraco/models.py</code> <pre><code>@dataclass(frozen=True)\nclass Card:\n    \"\"\"Represents a playing card.\"\"\"\n\n    rank: Rank\n    suit: Suit\n</code></pre>"},{"location":"models/#buraco.models.GameState","title":"<code>GameState</code>  <code>dataclass</code>","text":"<p>Represents the state of a Buraco game.</p> <p>Attributes:</p> Name Type Description <code>game_id</code> <code>UUID</code> <p>The unique identifier for the game.</p> <code>players</code> <code>List[Player]</code> <p>The list of players in the game.</p> <code>deck</code> <code>Deck</code> <p>The game deck.</p> <code>discard_pile</code> <code>List[Card]</code> <p>The discard pile.</p> <code>pots</code> <code>List[List[Card]]</code> <p>The two pots.</p> <code>current_turn_player_index</code> <code>int</code> <p>The index of the player whose turn it is.</p> <code>game_started</code> <code>bool</code> <p>Whether the game has started.</p> Source code in <code>buraco/models.py</code> <pre><code>@dataclass\nclass GameState:\n    \"\"\"Represents the state of a Buraco game.\n\n    Attributes:\n        game_id (UUID): The unique identifier for the game.\n        players (List[Player]): The list of players in the game.\n        deck (Deck): The game deck.\n        discard_pile (List[Card]): The discard pile.\n        pots (List[List[Card]]): The two pots.\n        current_turn_player_index (int): The index of the player whose turn it is.\n        game_started (bool): Whether the game has started.\n    \"\"\"\n\n    game_id: UUID = field(default_factory=uuid4)\n    players: List[Player] = field(default_factory=list)\n    deck: \"Deck\" | None = None\n    discard_pile: List[Card] = field(default_factory=list)\n    pots: List[List[Card]] = field(default_factory=list)\n    current_turn_player_index: int = 0\n    game_started: bool = False\n    turn_phase: TurnPhase = TurnPhase.DRAW\n    last_discard: Card | None = None\n    game_over: bool = False\n    scores: Dict[str, int] = field(default_factory=dict)\n    pot_taken_by_team: List[bool] = field(default_factory=lambda: [False, False])\n</code></pre>"},{"location":"models/#buraco.models.Meld","title":"<code>Meld</code>  <code>dataclass</code>","text":"<p>Represents a meld of cards.</p> Source code in <code>buraco/models.py</code> <pre><code>@dataclass\nclass Meld:\n    \"\"\"Represents a meld of cards.\"\"\"\n\n    meld_id: UUID = field(default_factory=uuid4)\n    cards: List[Card] = field(default_factory=list)\n</code></pre>"},{"location":"models/#buraco.models.Player","title":"<code>Player</code>  <code>dataclass</code>","text":"<p>Represents a player in the game.</p> Source code in <code>buraco/models.py</code> <pre><code>@dataclass\nclass Player:\n    \"\"\"Represents a player in the game.\"\"\"\n\n    name: str\n    player_id: UUID = field(default_factory=uuid4)\n    is_bot: bool = False\n    hand: List[Card] = field(default_factory=list)\n    melds: List[Meld] = field(default_factory=list)\n    score: int = 0\n</code></pre>"},{"location":"models/#buraco.models.Rank","title":"<code>Rank</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the rank of a card.</p> Source code in <code>buraco/models.py</code> <pre><code>class Rank(Enum):\n    \"\"\"Represents the rank of a card.\"\"\"\n\n    ACE = \"A\"\n    TWO = \"2\"\n    THREE = \"3\"\n    FOUR = \"4\"\n    FIVE = \"5\"\n    SIX = \"6\"\n    SEVEN = \"7\"\n    EIGHT = \"8\"\n    NINE = \"9\"\n    TEN = \"10\"\n    JACK = \"J\"\n    QUEEN = \"Q\"\n    KING = \"K\"\n    JOKER = \"Joker\"\n</code></pre>"},{"location":"models/#buraco.models.Suit","title":"<code>Suit</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the suit of a card.</p> Source code in <code>buraco/models.py</code> <pre><code>class Suit(Enum):\n    \"\"\"Represents the suit of a card.\"\"\"\n\n    HEARTS = \"Hearts\"\n    DIAMONDS = \"Diamonds\"\n    CLUBS = \"Clubs\"\n    SPADES = \"Spades\"\n    JOKER = \"Joker\"\n</code></pre>"},{"location":"models/#buraco.models.TurnPhase","title":"<code>TurnPhase</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the current phase of a player's turn.</p> Source code in <code>buraco/models.py</code> <pre><code>class TurnPhase(Enum):\n    \"\"\"Represents the current phase of a player's turn.\"\"\"\n    DRAW = \"draw\"\n    MELD = \"meld\"\n    DISCARD = \"discard\"\n</code></pre>"}]}